#!/public/apps/anaconda/anaconda3/2021.05/bin/python

import sys
import argparse
import numpy as np
from vaspwfc import vaspwfc


def parse_cml_args(cml):
    '''
    CML parser.
    '''
    arg = argparse.ArgumentParser(add_help=True)

    arg.add_argument('-w', '--wavecar', dest='wavecar', action='store', type=str,
                     default='WAVECAR',
                     help='Location of the WAVECAR')

    arg.add_argument('-p', '--poscar', dest='poscar', action='store', type=str,
                     default='POSCAR',
                     help='location of VASP POSCAR')

    arg.add_argument('-s', dest='ispin', action='store', type=int,
                     default=1,
                     help='the spin index, starting from 1')

    arg.add_argument('-k', dest='ikpt', action='store', type=int,
                     default=1,
                     help='the k-point index, starting from 1')

    arg.add_argument('-n', dest='iband', action='store', type=int,
                     default=1,
                     help='the band index, starting from 1')

    arg.add_argument('--sep_mod_phase', dest='sep_mod_phase', action='store_true',
                     help='Write module/phase of wavefunction in separate files. \
                     Default is to write real/imaginar part of wfcs.')

    arg.add_argument('--bloch', dest='bloch', action='store_true',
                     help='output the Bloch wave, i.e. exp(ikr) * u(r)')

    arg.add_argument('--r0', dest='r0', action='store',
                     type=float, nargs=3, default=[0, 0, 0],
                     help='shift of the exp(ikr) phase to get Bloch wfc in other cells')

    arg.add_argument('--ngrid', dest='ngrid', action='store',
                     nargs=3, type=int, default=None,
                     help='the FFT grid size')

    arg.add_argument('--prefix', dest='prefix', action='store',
                     type=str, default='wfc',
                     help='the prefix of the output wavefunction file')

    arg.add_argument('--lgamma', dest='lgamma', action='store_true',
                     help='WAVECAR from GAMMA-ONLY VASP')

    arg.add_argument('--gamma_half', dest='gamma_half', action='store',
                     type=str, default='x', choices=['x', 'z'],
                     help='GAMMA half in x/z direction')

    arg.add_argument('--lsorbit', dest='lsorbit', action='store_true',
                     help='WAVECAR from NONCOLLINEAR VASP')

    arg.add_argument('--action', dest='action', action='store',
                     default='none',
                     choices=['none', 'normsquared'],
                     help='action upon the wavefunction before writing to file')

    return arg.parse_args(cml)


def main(cml):
    p = parse_cml_args(cml)

    wfc = vaspwfc(p.wavecar,
                  lsorbit=p.lsorbit, lgamma=p.lgamma,
                  gamma_half=p.gamma_half)

    phi = wfc.wfc_r(ispin=p.ispin, ikpt=p.ikpt, iband=p.iband,
                    ngrid=p.ngrid, kr_phase=p.bloch, r0=p.r0)

    if p.action == 'normsquared':
        if p.lsorbit:
            phi = np.abs(phi[0])**2 + np.abs(phi[1])**2
        else:
            phi = np.abs(phi)**2

        wfc.save2vesta(phi, poscar=p.poscar, lreal=True,
                       prefix="{}_{}-{}-{}".format(p.prefix,
                                                   p.ispin, p.ikpt, p.iband))
    else:
        if p.lsorbit:
            if p.sep_mod_phase:
                phi = [
                    np.abs(phi[0]) + 1j * np.angle(phi[0]),
                    np.abs(phi[1]) + 1j * np.angle(phi[1]),
                ]
            for ii in range(2):
                wfc.save2vesta(
                    phi[ii], poscar=p.poscar,
                    prefix="{}_{}-{}-{}_s{}".format(p.prefix,
                                                    p.ispin, p.ikpt,
                                                    p.iband, ii))
        else:
            if p.sep_mod_phase:
                phi = np.abs(phi) + 1j * np.angle(phi)

            wfc.save2vesta(
                phi, poscar=p.poscar,
                prefix="{}_{}-{}-{}".format(p.prefix,
                                            p.ispin, p.ikpt,
                                            p.iband))


if __name__ == "__main__":
    main(sys.argv[1:])
