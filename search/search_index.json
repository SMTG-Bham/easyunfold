{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to easyunfold documentation This package is intended for obtaining the effective band structure of a supercell for a certain path of the primitive cell. It was originally based on PyVaspwfc for reading wavefunction output of VASP, and contains some code of the latter. An notable improvement is that breaking symmetry is taken accounted of by sampling additional kpoints and taking average accordingly, which was previously missing. Our goal is to make the unfolding process easier to carry out and less likely to go wrong. For the methodology, see here . NOTE: This package is under a MIT license, although the original PyVaspwfc code does not specific a license.","title":"Home"},{"location":"#welcome-to-easyunfold-documentation","text":"This package is intended for obtaining the effective band structure of a supercell for a certain path of the primitive cell. It was originally based on PyVaspwfc for reading wavefunction output of VASP, and contains some code of the latter. An notable improvement is that breaking symmetry is taken accounted of by sampling additional kpoints and taking average accordingly, which was previously missing. Our goal is to make the unfolding process easier to carry out and less likely to go wrong. For the methodology, see here . NOTE: This package is under a MIT license, although the original PyVaspwfc code does not specific a license.","title":"Welcome to easyunfold documentation"},{"location":"example_mgo/","text":"Unfolding MgO band structure with atomic projections Note Relevant files can be found in the examples/MgO folder. In some cases, it is useful to know the atomic contributions of the bands. This can be done for unfolded bands as well. For a normal band structure, the contributions can be inferred by colouring the band according to the elemental contributions. Band structure of MgO with atomic contribution Similar plots can be generate for unfolded band structure. However, because the spectral function itself contains both the location of the band and its intensity , adding a third information regarding the projection can be tricky. In this example, we unfold the bands from a MgO 2x1x2 supercell with the first Mg atom displaced. The procedure is essentially the same as the Si supercell example. The only difference is that we turn on the calculation of orbital projections with LORBIT=11 in the INCAR file. When plotting the unfolded band, the plot-projections subcommand is used: easyunfold unfold plot-projections --procar MgO_super/PROCAR \\ --atoms-idx=\"1-4|5-8\" --out-file unfold_project.png --combined --cmap=\"Greens|Reds\" Note that the path of the PROCAR is passed along with the group of atoms. In this example, the first four atoms are Mg the last four are O , and we would like to show the contribution of the band based on the elements. Different groups are separated by | , and - can be used to define the range. Note that use of one-based indexing for atoms, although in python zero-based indexing is used internally. Note The projections are not stored in the easyunfold.json data file. So the PROCAR is should be kept for replotting in the future. The --combined option creates a combined plot with each group colour with different colour maps. The spectral intensity is used to define the transparency ( alpha ) allowing the fusion of multiple projections into a single plot. Unfolded MgO band structure with projections. Green for Mg atoms and red for O atoms. In some cases, especially if there are many projection to be plotted at the same time, it can be clearer to create separateted plots for each. easyunfold unfold plot-projections --procar MgO_super/PROCAR --atoms-idx=\"1-4|5-8\" \\ --out-file unfold_project_sep.png Unfolded MgO band structure with projections plotted separately.","title":"MgO Projection"},{"location":"example_mgo/#unfolding-mgo-band-structure-with-atomic-projections","text":"Note Relevant files can be found in the examples/MgO folder. In some cases, it is useful to know the atomic contributions of the bands. This can be done for unfolded bands as well. For a normal band structure, the contributions can be inferred by colouring the band according to the elemental contributions. Band structure of MgO with atomic contribution Similar plots can be generate for unfolded band structure. However, because the spectral function itself contains both the location of the band and its intensity , adding a third information regarding the projection can be tricky. In this example, we unfold the bands from a MgO 2x1x2 supercell with the first Mg atom displaced. The procedure is essentially the same as the Si supercell example. The only difference is that we turn on the calculation of orbital projections with LORBIT=11 in the INCAR file. When plotting the unfolded band, the plot-projections subcommand is used: easyunfold unfold plot-projections --procar MgO_super/PROCAR \\ --atoms-idx=\"1-4|5-8\" --out-file unfold_project.png --combined --cmap=\"Greens|Reds\" Note that the path of the PROCAR is passed along with the group of atoms. In this example, the first four atoms are Mg the last four are O , and we would like to show the contribution of the band based on the elements. Different groups are separated by | , and - can be used to define the range. Note that use of one-based indexing for atoms, although in python zero-based indexing is used internally. Note The projections are not stored in the easyunfold.json data file. So the PROCAR is should be kept for replotting in the future. The --combined option creates a combined plot with each group colour with different colour maps. The spectral intensity is used to define the transparency ( alpha ) allowing the fusion of multiple projections into a single plot. Unfolded MgO band structure with projections. Green for Mg atoms and red for O atoms. In some cases, especially if there are many projection to be plotted at the same time, it can be clearer to create separateted plots for each. easyunfold unfold plot-projections --procar MgO_super/PROCAR --atoms-idx=\"1-4|5-8\" \\ --out-file unfold_project_sep.png Unfolded MgO band structure with projections plotted separately.","title":"Unfolding MgO band structure with atomic projections"},{"location":"example_si222/","text":"Unfolding 2x2x2 Si supercell with a displaced atom Generate project file and kpoints for supercell calculation Note The files needed as provided in expamples/Si222. This guide assumes the current working directory is located at the root of that folder. First, generate the supercell kpoints: easyunfold generate Si/POSCAR Si_super_deformed/POSCAR Si/KPOINTS_band Copy the kpoints to the supercell calculation folder: cp KPOINTS_easyunfold Si_supercell_deformed This generates an easyunfold.json file in the current direction containing information about the unfolding. Name of this file can be modified with the --out-file commandline argument. Information stored in this file can be inspected with command: $ easyunfold unfold status Loaded data from easyunfold.json Primitive cell information: Space group number: 160 Internation symbol: R3m Point group: 3m Supercell cell information: Space group number: 227 Internation symbol: Fd-3m Point group: m-3m No. of k points in the primitive cell : 73 No. of expanded kpoints to be calculated cell : 132 (136) No. of rotations in the primitive cell : 48 No. of rotations in the super cell : 6 Path in the primitive cell: \\Gamma : 1 L : 21 W : 38 X : 50 \\Gamma : 73 Please run the supercell band structure calculation and run `unfold calculate`. Performing supercell band structure calculation Band structure calculation in VASP normally involves two steps. First, a normal single point calculation is performed to obtain the charge density. Afterwards, a none self-consistent calculation is carried out to compute the eigenvalues of the kpoints along the band structure paths defined. First, ensure the kpoints for SCF is used and run the supercell calculation. The ICHARG=11 must commented out in the INCAR for the single point calculation: cd Si_supercell_deformed cp KPOINTS_scf KPOINTS sed -i 's/^ICHARG = 11/!ICHARG = 11/g' INCAR mpirun -np 4 vasp_std Now run the band structure calculation with ICHARG=11 , and the kpoints mapped to the supercell from the primitive cell path: sed -i 's/.*ICHARG = 11/ICHARG = 11/g' INCAR cp KPOINTS_easyunfold KPOINTS mpirun -np 4 vasp_std Perform unfolding Calculate the weights and record the VBM: cd ../ easyunfold unfold calculate Si_super_deformed/WAVECAR Note If you don't wnat to run the VASP calculation by yourself, the calculated WAVECAR and vasprun.xml for this example with: wget -o Si_super_deformed/WAVECAR https://www.dropbox.com/s/3cmn2epw7d290jd/WAVECAR?dl=1 wget -o Si_super_deformed/vasprun.xml https://www.dropbox.com/s/ota78qqdvxsehmi/vasprun.xml?dl=1 Plot the unfolded band structure: easyunfold unfold plot Output: Spectral function of the unfolded bands Band structure of the primitive cell: Primitive cell band structure of Si Note the appearance of extra branches due to symmetry breaking. What happens if the symmetry is not taken into account? We can create a new unfolding project (data file) using the following command: easyunfold generate Si/POSCAR Si_super_deformed/POSCAR Si/KPOINTS_band --no-expand --out-file no-expand.json Swap the KPOINTS to the new file cp KPOINTS_no-expand Si_super_deformed/KPOINTS cd Si_super_deformed mpirun -np 4 vasp_std cd ../ easyunfold --help no-expand.json calculate Si_super_deformed/WAVECAR easyunfold unfold --data-file no-expand.json plot --out-file unfold_no-expand.png output: Spectral function of the unfolded bands Comparing with the one above, there are breaking of the bands and some branches are missing (near the gamma point). Nevertheless, by not expanding the kpoint paths, fewer supercell kpoints need to be calculated. $ easyunfold unfold --data-file no-expand.json plot --out-file unfold_no-expand.png Loaded data from no-expand.json Using a reference energy of 5.284 eV Unfolded band structure saved to unfold_no-expand.png $ easyunfold unfold --data-file no-expand.json status Loaded data from no-expand.json Primitive cell information: Space group number: 160 Internation symbol: R3m Point group: 3m Supercell cell information: Space group number: 227 Internation symbol: Fd-3m Point group: m-3m No. of k points in the primitive cell : 73 No. of expanded kpoints to be calculated cell : 70 (73) No. of rotations in the primitive cell : 48 No. of rotations in the super cell : 6 Path in the primitive cell: \\Gamma : 1 L : 21 W : 38 X : 50 \\Gamma : 73 Unfolding had been performed - use `unfold plot` to plot the spectral function.","title":"Si Supercell"},{"location":"example_si222/#unfolding-2x2x2-si-supercell-with-a-displaced-atom","text":"","title":"Unfolding 2x2x2 Si supercell with a displaced atom"},{"location":"example_si222/#generate-project-file-and-kpoints-for-supercell-calculation","text":"Note The files needed as provided in expamples/Si222. This guide assumes the current working directory is located at the root of that folder. First, generate the supercell kpoints: easyunfold generate Si/POSCAR Si_super_deformed/POSCAR Si/KPOINTS_band Copy the kpoints to the supercell calculation folder: cp KPOINTS_easyunfold Si_supercell_deformed This generates an easyunfold.json file in the current direction containing information about the unfolding. Name of this file can be modified with the --out-file commandline argument. Information stored in this file can be inspected with command: $ easyunfold unfold status Loaded data from easyunfold.json Primitive cell information: Space group number: 160 Internation symbol: R3m Point group: 3m Supercell cell information: Space group number: 227 Internation symbol: Fd-3m Point group: m-3m No. of k points in the primitive cell : 73 No. of expanded kpoints to be calculated cell : 132 (136) No. of rotations in the primitive cell : 48 No. of rotations in the super cell : 6 Path in the primitive cell: \\Gamma : 1 L : 21 W : 38 X : 50 \\Gamma : 73 Please run the supercell band structure calculation and run `unfold calculate`.","title":"Generate project file and kpoints for supercell calculation"},{"location":"example_si222/#performing-supercell-band-structure-calculation","text":"Band structure calculation in VASP normally involves two steps. First, a normal single point calculation is performed to obtain the charge density. Afterwards, a none self-consistent calculation is carried out to compute the eigenvalues of the kpoints along the band structure paths defined. First, ensure the kpoints for SCF is used and run the supercell calculation. The ICHARG=11 must commented out in the INCAR for the single point calculation: cd Si_supercell_deformed cp KPOINTS_scf KPOINTS sed -i 's/^ICHARG = 11/!ICHARG = 11/g' INCAR mpirun -np 4 vasp_std Now run the band structure calculation with ICHARG=11 , and the kpoints mapped to the supercell from the primitive cell path: sed -i 's/.*ICHARG = 11/ICHARG = 11/g' INCAR cp KPOINTS_easyunfold KPOINTS mpirun -np 4 vasp_std","title":"Performing supercell band structure calculation"},{"location":"example_si222/#perform-unfolding","text":"Calculate the weights and record the VBM: cd ../ easyunfold unfold calculate Si_super_deformed/WAVECAR Note If you don't wnat to run the VASP calculation by yourself, the calculated WAVECAR and vasprun.xml for this example with: wget -o Si_super_deformed/WAVECAR https://www.dropbox.com/s/3cmn2epw7d290jd/WAVECAR?dl=1 wget -o Si_super_deformed/vasprun.xml https://www.dropbox.com/s/ota78qqdvxsehmi/vasprun.xml?dl=1 Plot the unfolded band structure: easyunfold unfold plot Output: Spectral function of the unfolded bands Band structure of the primitive cell: Primitive cell band structure of Si Note the appearance of extra branches due to symmetry breaking.","title":"Perform unfolding"},{"location":"example_si222/#what-happens-if-the-symmetry-is-not-taken-into-account","text":"We can create a new unfolding project (data file) using the following command: easyunfold generate Si/POSCAR Si_super_deformed/POSCAR Si/KPOINTS_band --no-expand --out-file no-expand.json Swap the KPOINTS to the new file cp KPOINTS_no-expand Si_super_deformed/KPOINTS cd Si_super_deformed mpirun -np 4 vasp_std cd ../ easyunfold --help no-expand.json calculate Si_super_deformed/WAVECAR easyunfold unfold --data-file no-expand.json plot --out-file unfold_no-expand.png output: Spectral function of the unfolded bands Comparing with the one above, there are breaking of the bands and some branches are missing (near the gamma point). Nevertheless, by not expanding the kpoint paths, fewer supercell kpoints need to be calculated. $ easyunfold unfold --data-file no-expand.json plot --out-file unfold_no-expand.png Loaded data from no-expand.json Using a reference energy of 5.284 eV Unfolded band structure saved to unfold_no-expand.png $ easyunfold unfold --data-file no-expand.json status Loaded data from no-expand.json Primitive cell information: Space group number: 160 Internation symbol: R3m Point group: 3m Supercell cell information: Space group number: 227 Internation symbol: Fd-3m Point group: m-3m No. of k points in the primitive cell : 73 No. of expanded kpoints to be calculated cell : 70 (73) No. of rotations in the primitive cell : 48 No. of rotations in the super cell : 6 Path in the primitive cell: \\Gamma : 1 L : 21 W : 38 X : 50 \\Gamma : 73 Unfolding had been performed - use `unfold plot` to plot the spectral function.","title":"What happens if the symmetry is not taken into account?"},{"location":"guide/","text":"Main goal of this tool is to make the unfolding process easier. To generate a unfolded band structure, one typically needs to perform the following step: Create a primitive cell, and generate a k point path for this primitive cell. Create a supercell, and obtain its optimised structure. Generate a series of kpoints in the supercell to be calculated. Perform a band structure calculation using the supercell, and save its wave function. Run post-processing to obtain the unfolded band structure. The supercell usually contains certain defects, or a special quasi random structure. In both cases, its symmetry is lowered when compared to the perfect primitive cell. Hence, for a given kpoint path in the primitive cell, additional kpoints may need to be sampled, and the extracted spectral weights need to be averaged in the end to obtained the effective band structure (EBS). Step-by-step instructions At the moment, only VASP calculations are supported, although in principle other PW code can be supported easily if the wavefunction can be read in. Use of VASP is assumed for the guide below. Step 1 - Generate the kpoints path of the primitive cell This can be done by well established packages such as seekpath . Be careful that the \"standardised\" primitive cell may be different from input structure, and the generated path is correct for the standard primitive cell only. We recommand using sumo for generating the kpoints, which provides a nice command line interface: sumo-kgen -p POSCAR Care should be taken if one uses the initial structure for further supercell generation, do verify that the lattice parameters are identical between the two. A POSCAR_prim file will be written out if sumo think the primitive cell is different from the input structure. The kpoints along the path is written to KPOINTS_band . Step 2 - Generate the kpoints to be used for the supercell calculation At this point, you should have your relaxed supercell structure (which may have a lower symmetry). The set of kpoints for the supercell band structure can be generated with: easyunfold generate primitive/POSCAR supercell/POSCAR primitive/KPOINTS_band --matrix \"2 2 2\" for hybrid functional calculations, it an be useful to split the kpoints into multiple calculations for reduced costs or memory consumptions. Note that the --matrix input is for setting the transformation matrix such that cell_super = M @ cell_primitive where cell_super and cell_primitive are (3,3) matrix made of row vectors . If M is non-diagonal, all nine elements must be passed in a row-major order. It is possible to omit `--matrix`` if the supercell is perfectly commensurate with the primitive cell. This can be the case if the supercell calculation did not undergo cell relaxation. If cell relaxation did take place, it is important to note that the unfolded band structure is not for exact original primitive cell, but for a primitive cell deformed in a similar way as the supercell. A easyunfold.json file will be written which contains the information of the unfolding. The kpoints needed to be calculated for the supercell is written to a file named KPOINTS_easyunfold . It is possible to change the name easyunfold by passing a explicit tag with the command line --out-file . For hybrid functional calculations, you may want to split the kpoints into multiple calculations: easyunfold generate primitive/POSCAR supercell/POSCAR primitive/KPOINTS_band --matrix \"2 2 2\" --scf-kpoints IBZKPT --nk-per-split 60 This will generate files named as KPOINTS_easyunfold_001 , KPOINTS_easyunfold_002 , each containing 60 kpoints. If a IBZKPT file is the provided, its kpoints will be included with their original weights, and all of the kpoints included by easyunfold will be zero-weighted. This is necessary for hybrid functional calculations where the electronic minimisation must be conducted self-consistently (e.g. ICHARG<10 ). Step 3 - Perform the unfolding At this point, a supercell calculation should be completed with a WAVECAR written containing all of the kpoints in the KPOINTS_easyunfold file generated. This is typically a non self-consistent calculation with ICHARG=11 for standard DFT, or a self-consistent calculation with zero-weighted kpoints if hybrid functional is used. To compute the spectral weights, run the following command: easyunfold unfold calculate WAVECAR This command compute the spectral weight and save them into the easyunfold.json file. You can load the easyunfold.json file to read the spectral weights manually, or proceed with the command line interface to generate a plot. If the kpoints has been split into multiple calculations (for example, for those involving hybrid functional), all of the WAVECAR files need to be passed: easyunfold unfold calculate calc1/WAVECAR calc2/WAVECAR For large WAVECAR , it may take some time to parse and compute the weights. Step 4 - Plot the results Simply do: easyunfold unfold plot to generate a plot of the spectral function. It is possible to further customise the plot though command line arguments - see the help with easyunfold unfold plot --help .","title":"Guide"},{"location":"guide/#step-by-step-instructions","text":"At the moment, only VASP calculations are supported, although in principle other PW code can be supported easily if the wavefunction can be read in. Use of VASP is assumed for the guide below.","title":"Step-by-step instructions"},{"location":"guide/#step-1-generate-the-kpoints-path-of-the-primitive-cell","text":"This can be done by well established packages such as seekpath . Be careful that the \"standardised\" primitive cell may be different from input structure, and the generated path is correct for the standard primitive cell only. We recommand using sumo for generating the kpoints, which provides a nice command line interface: sumo-kgen -p POSCAR Care should be taken if one uses the initial structure for further supercell generation, do verify that the lattice parameters are identical between the two. A POSCAR_prim file will be written out if sumo think the primitive cell is different from the input structure. The kpoints along the path is written to KPOINTS_band .","title":"Step 1 - Generate the kpoints path of the primitive cell"},{"location":"guide/#step-2-generate-the-kpoints-to-be-used-for-the-supercell-calculation","text":"At this point, you should have your relaxed supercell structure (which may have a lower symmetry). The set of kpoints for the supercell band structure can be generated with: easyunfold generate primitive/POSCAR supercell/POSCAR primitive/KPOINTS_band --matrix \"2 2 2\" for hybrid functional calculations, it an be useful to split the kpoints into multiple calculations for reduced costs or memory consumptions. Note that the --matrix input is for setting the transformation matrix such that cell_super = M @ cell_primitive where cell_super and cell_primitive are (3,3) matrix made of row vectors . If M is non-diagonal, all nine elements must be passed in a row-major order. It is possible to omit `--matrix`` if the supercell is perfectly commensurate with the primitive cell. This can be the case if the supercell calculation did not undergo cell relaxation. If cell relaxation did take place, it is important to note that the unfolded band structure is not for exact original primitive cell, but for a primitive cell deformed in a similar way as the supercell. A easyunfold.json file will be written which contains the information of the unfolding. The kpoints needed to be calculated for the supercell is written to a file named KPOINTS_easyunfold . It is possible to change the name easyunfold by passing a explicit tag with the command line --out-file . For hybrid functional calculations, you may want to split the kpoints into multiple calculations: easyunfold generate primitive/POSCAR supercell/POSCAR primitive/KPOINTS_band --matrix \"2 2 2\" --scf-kpoints IBZKPT --nk-per-split 60 This will generate files named as KPOINTS_easyunfold_001 , KPOINTS_easyunfold_002 , each containing 60 kpoints. If a IBZKPT file is the provided, its kpoints will be included with their original weights, and all of the kpoints included by easyunfold will be zero-weighted. This is necessary for hybrid functional calculations where the electronic minimisation must be conducted self-consistently (e.g. ICHARG<10 ).","title":"Step 2 - Generate the kpoints to be used for the supercell calculation"},{"location":"guide/#step-3-perform-the-unfolding","text":"At this point, a supercell calculation should be completed with a WAVECAR written containing all of the kpoints in the KPOINTS_easyunfold file generated. This is typically a non self-consistent calculation with ICHARG=11 for standard DFT, or a self-consistent calculation with zero-weighted kpoints if hybrid functional is used. To compute the spectral weights, run the following command: easyunfold unfold calculate WAVECAR This command compute the spectral weight and save them into the easyunfold.json file. You can load the easyunfold.json file to read the spectral weights manually, or proceed with the command line interface to generate a plot. If the kpoints has been split into multiple calculations (for example, for those involving hybrid functional), all of the WAVECAR files need to be passed: easyunfold unfold calculate calc1/WAVECAR calc2/WAVECAR For large WAVECAR , it may take some time to parse and compute the weights.","title":"Step 3 - Perform the unfolding"},{"location":"guide/#step-4-plot-the-results","text":"Simply do: easyunfold unfold plot to generate a plot of the spectral function. It is possible to further customise the plot though command line arguments - see the help with easyunfold unfold plot --help .","title":"Step 4 - Plot the results"},{"location":"installation/","text":"At the moment, the package should be installed from the git repository. A recently version of pip is needed to do this, due to the use of new style pyproject.toml configuration file. To upgrade your pip , do: pip install -U pip Assuming the package is in the easyunfold folder, use the following command to install: pip install ./easyunfold After installation, run easyunfold should give the following output: Usage: easyunfold [OPTIONS] COMMAND [ARGS]... Tool for performing band unfolding Options: --help Show this message and exit. Commands: generate Generate the kpoints for sampling the supercell unfold Perform unfolding and plotting","title":"Installation"},{"location":"theorey/","text":"Theory","title":"Theorey"},{"location":"theorey/#theory","text":"","title":"Theory"}]}